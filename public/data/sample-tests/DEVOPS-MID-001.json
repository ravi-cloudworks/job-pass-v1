{
    "id": "DEVOPS-MID-001",
    "title": "# DevOps Intermediate Concepts\n## CI/CD, Containerization, and Infrastructure as Code",
    "time_limit": 240,
    "questions": [
      {
        "id": "q1",
        "question": "# CI/CD Pipeline Implementation\n\nExamine this DevOps architecture diagram:\n\n![DevOps Pipeline](https://www.tutorialspoint.com/devops/images/devops-architecture.jpg)\n\n1. Identify each component in the DevOps pipeline shown above\n2. Design a CI/CD pipeline for a microservices application with these requirements:\n   - Multiple development teams contributing to different services\n   - Mix of technologies (Node.js, Java, Python)\n   - Must deploy to both staging and production environments\n   - Requires automated testing at multiple levels\n   - Must include security scanning\n3. Choose appropriate tools for each stage and explain your choices\n4. Discuss how you would handle rollbacks and failed deployments"
      },
      {
        "id": "q2",
        "question": "# Docker Container Orchestration\n\nAnalyze this Docker Compose file:\n\n```yaml\nversion: '3.8'\n\nservices:\n  web:\n    build: ./web\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - api\n    environment:\n      - API_URL=http://api:3000\n    networks:\n      - frontend\n      - backend\n    deploy:\n      replicas: 2\n      restart_policy:\n        condition: on-failure\n\n  api:\n    build: ./api\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n    environment:\n      - DB_HOST=db\n      - DB_USER=postgres\n      - DB_PASSWORD_FILE=/run/secrets/db_password\n    networks:\n      - backend\n    secrets:\n      - db_password\n\n  db:\n    image: postgres:13\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password\n    networks:\n      - backend\n    secrets:\n      - db_password\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  postgres_data:\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n```\n\n1. Explain the architecture of this multi-container application\n2. What security considerations are addressed in this configuration?\n3. How would you scale this application using Docker Swarm or Kubernetes?\n4. Identify potential issues with this configuration and suggest improvements\n5. Compare Docker Compose, Docker Swarm, and Kubernetes - when would you use each?"
      },
      {
        "id": "q3",
        "question": "# Infrastructure as Code with Terraform\n\nExamine this Terraform configuration:\n\n```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n  version = \"3.14.0\"\n\n  name = \"my-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"us-west-2a\", \"us-west-2b\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\"]\n\n  enable_nat_gateway = true\n  single_nat_gateway = true\n  enable_vpn_gateway = false\n\n  tags = {\n    Environment = var.environment\n    Project     = var.project_name\n  }\n}\n\nresource \"aws_security_group\" \"web\" {\n  name        = \"${var.project_name}-web-sg\"\n  description = \"Allow web traffic\"\n  vpc_id      = module.vpc.vpc_id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\nresource \"aws_instance\" \"web\" {\n  count = var.instance_count\n\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = var.instance_type\n  subnet_id     = module.vpc.public_subnets[count.index % length(module.vpc.public_subnets)]\n  security_groups = [aws_security_group.web.id]\n\n  user_data = templatefile(\"${path.module}/scripts/init.sh\", {\n    environment = var.environment\n  })\n\n  tags = {\n    Name        = \"${var.project_name}-web-${count.index}\"\n    Environment = var.environment\n  }\n}\n\nresource \"aws_lb\" \"web\" {\n  name               = \"${var.project_name}-web-lb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = [aws_security_group.web.id]\n  subnets            = module.vpc.public_subnets\n}\n```\n\n1. Describe the infrastructure this configuration creates\n2. What are the key Terraform concepts demonstrated here?\n3. How would you modify this configuration to:\n   - Use environment-specific configurations\n   - Implement state management for team collaboration\n   - Add auto-scaling capabilities\n4. Explain how you would manage sensitive data like credentials\n5. Discuss the benefits of infrastructure as code and potential challenges"
      },
      {
        "id": "q4",
        "question": "# Monitoring and Observability\n\nConsider this Prometheus monitoring dashboard for Kubernetes:\n\n![Prometheus Kubernetes Dashboard](https://grafana.com/static/assets/img/blog/k8s-dashboard-prometheus.png)\n\n1. Explain the components of a comprehensive monitoring system\n2. Design a monitoring and alerting strategy for a microservices application, covering:\n   - Infrastructure metrics\n   - Application performance\n   - Error rates and logs\n   - Business KPIs\n3. How would you implement distributed tracing across services?\n4. What's the difference between metrics, logs, and traces?\n5. Compare popular monitoring tools (Prometheus, Grafana, ELK Stack, Datadog) and their use cases\n6. Describe how you would set up alerting with appropriate thresholds and severity levels"
      },
      {
        "id": "q5",
        "question": "# Site Reliability Engineering (SRE) Practices\n\nWatch this short introduction to SRE:\n\n[What is Site Reliability Engineering (SRE)?](https://www.youtube.com/watch?v=uTEL8Ff1Zvk)\n\n1. Explain the key SRE principles and how they differ from traditional operations\n2. Define and calculate these reliability metrics:\n   - Service Level Indicators (SLIs)\n   - Service Level Objectives (SLOs)\n   - Service Level Agreements (SLAs)\n   - Error budgets\n3. For an e-commerce website, identify appropriate SLIs and set realistic SLOs\n4. How would you implement an incident management process following SRE practices?\n5. Describe strategies for reducing toil in operations\n6. How does chaos engineering improve system reliability, and how would you implement it safely?"
      }
    ]
  }