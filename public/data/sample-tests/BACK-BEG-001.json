{
    "id": "BACK-BEG-001",
    "title": "# Backend Development Basics\n## Node.js, Express, and Databases",
    "time_limit": 240,
    "questions": [
      {
        "id": "q1",
        "question": "# REST API Design\n\nExamine this API endpoint structure diagram:\n\n![REST API Structure](https://cdn-images-1.medium.com/max/1600/1*JLNE8Pn0GnKzWnmC1nXfrA.png)\n\n1. Explain the key principles of RESTful API design\n2. Design RESTful endpoints for a blog system with posts and comments\n3. For each endpoint, specify:\n   - HTTP method\n   - URL path\n   - Request body (if applicable)\n   - Expected response structure\n4. How would you handle authentication for these endpoints?"
      },
      {
        "id": "q2",
        "question": "# Node.js Asynchronous Programming\n\nCompare these three Node.js code examples that read a file and process its contents:\n\n**Example 1: Callbacks**\n```javascript\nconst fs = require('fs');\n\nfs.readFile('data.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  const processedData = data.toUpperCase();\n  console.log(processedData);\n});\n\nconsole.log('Reading file...');\n```\n\n**Example 2: Promises**\n```javascript\nconst fs = require('fs').promises;\n\nfs.readFile('data.txt', 'utf8')\n  .then(data => {\n    const processedData = data.toUpperCase();\n    console.log(processedData);\n  })\n  .catch(err => {\n    console.error('Error reading file:', err);\n  });\n\nconsole.log('Reading file...');\n```\n\n**Example 3: Async/Await**\n```javascript\nconst fs = require('fs').promises;\n\nasync function readAndProcessFile() {\n  try {\n    console.log('Reading file...');\n    const data = await fs.readFile('data.txt', 'utf8');\n    const processedData = data.toUpperCase();\n    console.log(processedData);\n  } catch (err) {\n    console.error('Error reading file:', err);\n  }\n}\n\nreadAndProcessFile();\n```\n\n1. Explain the differences between these three approaches\n2. Discuss the advantages and disadvantages of each\n3. In which scenarios would you prefer one over the others?\n4. What is the event loop in Node.js and how does it relate to these examples?"
      },
      {
        "id": "q3",
        "question": "# Database Schema Design\n\nYou're designing a database schema for an e-commerce application. Consider this entity relationship diagram:\n\n![E-commerce ER Diagram](https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/examples/ER-diagram-e-commerce.png)\n\n1. Identify the main entities that should be included in this system\n2. Specify the relationships between these entities (one-to-one, one-to-many, many-to-many)\n3. Design a normalized database schema with appropriate tables and fields\n4. Add at least three important constraints you would implement\n5. How would you handle product inventory and order processing?\n6. Discuss SQL vs NoSQL approaches for this application"
      },
      {
        "id": "q4",
        "question": "# Authentication & Security\n\nWatch this short video on JWT authentication:\n\n[JWT Authentication Flow](https://www.youtube.com/watch?v=7Q17ubqLfaM)\n\nNow, compare these authentication methods with their typical flows:\n\n1. **Session-based authentication**:\n   - User logs in with credentials\n   - Server creates a session and stores session ID in database\n   - Server sends session ID to client as cookie\n   - Client sends cookie with each request\n   - Server validates session ID on each request\n\n2. **JWT-based authentication**:\n   - User logs in with credentials\n   - Server creates and signs a JWT containing user info\n   - Server sends JWT to client\n   - Client stores JWT and sends it in Authorization header\n   - Server verifies JWT signature on each request\n\n3. **OAuth 2.0 with social login**:\n   - User clicks \"Login with Google/Facebook\"\n   - User is redirected to provider's authentication page\n   - After login, provider redirects back with authorization code\n   - Server exchanges code for access token\n   - Server uses token to fetch user information\n\nFor each method:\n- Explain the advantages and disadvantages\n- Discuss security concerns and best practices\n- Identify suitable use cases\n\nFinally, implement a secure password reset flow for a web application."
      },
      {
        "id": "q5",
        "question": "# API Error Handling\n\nExamine this Express.js application structure:\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/users/:id', async (req, res) => {\n  try {\n    const userId = req.params.id;\n    const user = await database.findUser(userId);\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    console.error('Failed to fetch user:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\napp.post('/users', async (req, res) => {\n  try {\n    const { name, email, password } = req.body;\n    \n    if (!name || !email || !password) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n    \n    const user = await database.createUser({ name, email, password });\n    res.status(201).json(user);\n  } catch (error) {\n    console.error('Failed to create user:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\napp.listen(3000);\n```\n\n1. Analyze the error handling in this code - what's good and what could be improved?\n2. Design a comprehensive error handling strategy for a REST API\n3. Implement a centralized error handling middleware for Express.js\n4. How would you handle validation errors vs. runtime errors?\n5. Discuss error logging and monitoring best practices\n6. How would you implement a rate limiting system to prevent abuse?"
      }
    ]
  }