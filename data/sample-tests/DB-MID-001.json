{
    "id": "DB-MID-001",
    "title": "# Database Design & Optimization\n## SQL, NoSQL, and Performance Tuning",
    "time_limit": 240,
    "questions": [
      {
        "id": "q1",
        "question": "# Database Normalization\n\nExamine this unnormalized database table design for an online bookstore:\n\n**Books Table:**\n| BookID | Title | Author | AuthorEmail | AuthorPhone | Publisher | PublisherAddress | PublisherPhone | Category | CategoryDescription | Price | Format | ISBN |\n|--------|-------|--------|------------|------------|-----------|------------------|---------------|----------|---------------------|-------|--------|------|\n| 1 | Database Design | John Smith, Sarah Lee | john@example.com, sarah@example.com | 555-1234, 555-5678 | Tech Books | 123 Tech St, San Francisco, CA | 555-9876 | Computer Science, Education | Technical books for computers, Books for teaching | 49.99 | Hardcover, E-book | 978-1234567890 |\n| 2 | Web Development | Sarah Lee | sarah@example.com | 555-5678 | Tech Books | 123 Tech St, San Francisco, CA | 555-9876 | Computer Science | Technical books for computers | 39.99 | E-book | 978-0987654321 |\n\n1. Identify the normalization issues in this table design\n2. Redesign this database to achieve Third Normal Form (3NF), showing all tables, fields, and relationships\n3. Explain the benefits of your normalized design\n4. Are there any scenarios where you might choose to denormalize parts of this database? Explain your reasoning\n5. How would you implement Many-to-Many relationships in your design?"
      },
      {
        "id": "q2",
        "question": "# SQL Query Optimization\n\nConsider the following database schema for an e-commerce platform:\n\n```sql\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(100),\n  email VARCHAR(100) UNIQUE,\n  address VARCHAR(200),\n  created_at TIMESTAMP\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(100),\n  description TEXT,\n  price DECIMAL(10, 2),\n  category_id INT,\n  inventory_count INT,\n  FOREIGN KEY (category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE categories (\n  category_id INT PRIMARY KEY,\n  name VARCHAR(50),\n  parent_category_id INT,\n  FOREIGN KEY (parent_category_id) REFERENCES categories(category_id)\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date TIMESTAMP,\n  status VARCHAR(20),\n  total_amount DECIMAL(10, 2),\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE order_items (\n  order_item_id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL(10, 2),\n  FOREIGN KEY (order_id) REFERENCES orders(order_id),\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n```\n\nAnalyze these SQL queries and optimize them for better performance:\n\n```sql\n-- Query 1: Find top-selling products in the last month\nSELECT p.product_id, p.name, SUM(oi.quantity) as total_sold\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nJOIN orders o ON oi.order_id = o.order_id\nWHERE o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY p.product_id, p.name\nORDER BY total_sold DESC\nLIMIT 10;\n\n-- Query 2: Find customers who have spent more than $1000\nSELECT c.customer_id, c.name, c.email, SUM(o.total_amount) as total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.name, c.email\nHAVING SUM(o.total_amount) > 1000\nORDER BY total_spent DESC;\n\n-- Query 3: Find products with low inventory in popular categories\nSELECT p.product_id, p.name, p.inventory_count, c.name as category\nFROM products p\nJOIN categories c ON p.category_id = c.category_id\nJOIN order_items oi ON p.product_id = oi.product_id\nWHERE p.inventory_count < 10\nGROUP BY p.product_id, p.name, p.inventory_count, c.name\nHAVING COUNT(oi.order_item_id) > 100;\n```\n\n1. Identify performance issues with each query\n2. Rewrite each query for better performance\n3. Suggest appropriate indexes that would improve these queries\n4. Explain the query execution plan you would expect for your optimized queries\n5. How would you monitor the performance of these queries in production?"
      },
      {
        "id": "q3",
        "question": "# NoSQL Database Design\n\nExamine this data modeling diagram for different NoSQL approaches:\n\n![NoSQL Data Modeling](https://cdn.educba.com/academy/wp-content/uploads/2020/01/NoSQL-Database-Types.jpg)\n\nYou're designing a data model for a social media platform with these requirements:\n- Users can post content (text, images, videos)\n- Users can follow other users\n- Users can like and comment on posts\n- The platform needs to display a personalized feed for each user\n- The system must support high read and write volumes\n- Analytics on trending topics and user engagement are important\n\n1. Compare how you would model this data in:\n   - A document database (like MongoDB)\n   - A column-family store (like Cassandra)\n   - A graph database (like Neo4j)\n\n2. For each database type:\n   - Design the data model\n   - Explain the access patterns it optimizes for\n   - Identify potential limitations\n\n3. Which NoSQL database would you recommend for this application and why?\n\n4. How would you handle data consistency and relationships in your chosen NoSQL solution?"
      },
      {
        "id": "q4",
        "question": "# Database Scaling and Sharding\n\nStudy this database sharding architecture diagram:\n\n![Database Sharding](https://assets.digitalocean.com/articles/understanding_sharding/DB_image_3_cropped.png)\n\nYou're working on a large-scale application that has outgrown its single database instance. The database currently handles:\n- 10 TB of data with 20% annual growth\n- 5,000 queries per second at peak\n- A mix of read-heavy and write-heavy operations\n- Global user base across different regions\n\n1. Design a comprehensive scaling strategy addressing:\n   - Vertical vs. horizontal scaling considerations\n   - Read replicas and load balancing\n   - Sharding approach (key-based, range-based, directory-based)\n   - Cross-shard queries and transactions\n\n2. If you choose to implement sharding:\n   - What would be an appropriate shard key?\n   - How would you handle schema changes across shards?\n   - How would you manage data migration during resharding?\n\n3. Discuss how your scaling strategy affects:\n   - Application code complexity\n   - Data consistency and integrity\n   - Operational management and monitoring\n   - Disaster recovery procedures\n\n4. What metrics would you monitor to determine if your scaling strategy is effective?"
      },
      {
        "id": "q5",
        "question": "# Database Security and Compliance\n\nWatch this short video on database security:\n\n[Database Security Best Practices](https://www.youtube.com/watch?v=1nbKBn3B91M)\n\nYou're responsible for designing the database security strategy for a healthcare application that stores protected health information (PHI). The application will be deployed in the cloud.\n\n1. Design a comprehensive database security plan addressing:\n   - Authentication and authorization mechanisms\n   - Encryption (at rest, in transit, and potentially in use)\n   - Auditing and monitoring\n   - Backup and recovery with security considerations\n   - Compliance with healthcare regulations (HIPAA)\n\n2. Implement the principle of least privilege:\n   - Design a role-based access control (RBAC) system for different user types\n   - Show how you would implement row-level and column-level security\n   - Explain how you would secure database administrator access\n\n3. For the specific case of cloud deployment:\n   - What additional security controls are needed?\n   - How would you handle key management?\n   - What shared responsibility aspects must be considered?\n\n4. How would you prepare for security incidents and audits?\n\n5. Discuss the trade-offs between security controls and database performance"
      }
    ]
  }